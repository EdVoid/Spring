Spring uses Singletons by default, good for Stateless beans
------------------------------------------------------
prototype scope produces one bean per request, good for stateful beans
------------------------------------------------------
git pull = fetch + merge

------------------------------------------------------
default bean id is class name starting with lower case
------------------------------------------------------
Section 1.9.2: Autowired

As of Spring Framework 4.3, an @Autowired annotation on such a constructor is no longer necessary if the target bean only defines one constructor to begin with. However, if several constructors are available, at least one must be annotated to teach the container which one to use.

I personally prefer to use the @Autowired annotation because it makes the code more readable. But as mentioned, the @Autowired is not required for this scenario.
------------------------------------------------------

Field injection, uses Java Reflection, configure dependency using Autowired annotation, applied directly to the field
no setter me
@Autowired
private FortuneService fortuneService;
------------------------------------------------------
NoUniqueBeanDefinitionException
injection will fail if there are multiple bean implementations, use @Qualifire("beanid")

@Qualifier uses bean id, not classname, remember that

for the special case of when BOTH the first and second characters of the class name are upper case, then the name is NOT converted.
For the case of RESTFortuneService
RESTFortuneService --> RESTFortuneService
------------------------------------------------------

If you are using Java 9, 10 or 11, then you will encounter an error when using @PostConstruct and @PreDestroy in your code.

These are the steps to resolve it. Come back to the lecture if you hit the error. 

Error

Eclipse is unable to import @PostConstruct or @PreDestroy

-----------------------------------------------------
In contrast to the other scopes, Spring does not manage the complete lifecycle of a
prototype bean: the container instantiates, configures, and otherwise assembles a
prototype object, and hands it to the client, with no further record of that prototype
instance. 
-----------------------------------------------------
This happens because of Java 9 and higher. 

When using Java 9 and higher, javax.annotation has been removed from its default classpath. That's why we Eclipse can't find it.

----------------------------------------------------------
If you are using Spring 4.2 and lower, you will need to add the code in bold.

---

package com.luv2code.springdemo;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;

@Configuration
// @ComponentScan("com.luv2code.springdemo")
@PropertySource("classpath:sport.properties")
public class SportConfig {
    
    // add support to resolve ${...} properties
    @Bean
    public static PropertySourcesPlaceholderConfigurer
                    propertySourcesPlaceHolderConfigurer() {
        
        return new PropertySourcesPlaceholderConfigurer();
    }

------------------------------------------------------------------------